<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tidyverse on ECOSTATS</title>
    <link>https://ecological-stats.netlify.app/tags/tidyverse/</link>
    <description>Recent content in tidyverse on ECOSTATS</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sun, 15 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ecological-stats.netlify.app/tags/tidyverse/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>出版できる図表をggplotで</title>
      <link>https://ecological-stats.netlify.app/2022/05/15/ggplot/</link>
      <pubDate>Sun, 15 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ecological-stats.netlify.app/2022/05/15/ggplot/</guid>
      <description>応答変数（Y軸）の異なる図を並べる軸のスケールをパネルごとに変える変数変換特殊文字軸名軸の値パネルストライプ見栄えのいい図表を作ることはとても好きで、不必要なほどにこだわってしまうこともある。しかし、「査読コメントに対応するために、図表を作り直すこと」は大嫌いであった*。これには理由がある。学生のころはＲの図表作成能力が低かったため、Rで図表のベースをつくったら、細かい調整をパワポやイラストレーターでしていたのだ。この作業は馬鹿にならない時間がかかるのだが、ちょっとした解析の修正や、リバイスの度にやり直しになる。
この作業による時間のロスが無駄だと感じたため、そのまま出版できる図表をコードを走らせるだけで作れるようせっせと豆知識をためてきた。最近ではRmarkdownと合わせれば、MicrosoftのOfficeに頼らずともすべての作業がRで完結する。ここでは、ggplot関連で案外わかるまで時間のかかったものに焦点をあててまとめる。もっといい書き方もあるかもしれないので、そのときはこっそり教えてほしい。今回は種数と面積の関係を模した以下のダミーデータを使って例を示す。
# dummy datax &amp;lt;- runif(100, 0.1, 1000) # hypothetical aream &amp;lt;- model.matrix(~log(x)) # model matrixy &amp;lt;- rpois(length(x), exp(m %*% c(log(5), 0.5))) # hypothetical richnessdf0 &amp;lt;- tibble(area = x,gamma = y,group = rep(letters[1:4], each = 25)) %&amp;gt;% mutate(alpha = rbeta(length(y), 5, 5) * gamma,beta = gamma / alpha) %&amp;gt;% pivot_longer(cols = c(alpha, beta, gamma),names_to = &amp;quot;metric&amp;quot;,values_to = &amp;quot;diversity&amp;quot;)print(df0)## # A tibble: 300 x 4## area group metric diversity## &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt;## 1 630.</description>
    </item>
    
    <item>
      <title>Rの使えるパッケージ/ショートカット</title>
      <link>https://ecological-stats.netlify.app/2022/04/09/r-package-shortcut/</link>
      <pubDate>Sat, 09 Apr 2022 00:00:00 +0000</pubDate>
      
      <guid>https://ecological-stats.netlify.app/2022/04/09/r-package-shortcut/</guid>
      <description>Packagetidyversepatchworksf/raster/stars/exactextractrwhiteboxShortcutCode block label (Ctrl + Shift + R)Multi-line (un)comment (Ctrl + Shift + C)Pipe (Ctrl + Shift + M)Packagetidyverseデータ整理や図表作成に有用なさまざまなパッケージをまとめたもの。もはやこのパッケージなしにはRを使えない。とくにdplyr およびggplot2 に含まれる関数群にはお世話になりっぱなしである。このあたりの関数の使い方はWeb上にあふれているので割愛。dplyrであればHeavyWatalさんのWebsiteが分かりやすい。ggplot2に関してはFrom data to Vizがビジュアルから入れるのでとっつきやすい。
patchworkggplot2とセットで使うとことを想定したパッケージ（patchwork）。データフレームをグループごとにプロットする場合、facet_wrapやfacet_gridなどの関数を使うことが多いと思う。これらは非常に有用な関数なのだが、すべてのパネルで同じ構造（xとyが一緒など）をとる必要がある。しかし、論文の図を作る時、フォーマットの異なる図を横に並べて一つの図としてまとめたいことも多いと思う（例えば散布図と箱ひげ図を並べる、など）。そんなときに役立つのがpatchworkである。このパッケージを使うと、複数のggplotオブジェクトを好きなように配置できる。irisを使って例を下に示す。
pacman::p_load(tidyverse,patchwork)# scatter plotg1 &amp;lt;- iris %&amp;gt;% ggplot(aes(x = Sepal.Width,y = Sepal.Length,color = Species)) +geom_point(alpha = 0.3) +theme_bw()# box plotg2 &amp;lt;- iris %&amp;gt;%ggplot(aes(x = Species,y = Sepal.</description>
    </item>
    
  </channel>
</rss>
